// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  subscriptionPlan SubscriptionPlan @default(FREE)
  subscriptionStatus SubscriptionStatus @default(INACTIVE)
  stripeCustomerId String?
  stripeSubscriptionId String?
  currentPeriodEnd DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  userSessions  UserSession[]
  usage         Usage[]
  answers       Answer[]
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String
  title       String
  resumeText  String?
  jobDescription String?
  questions   Question[]
  answers     Answer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id              String      @id @default(cuid())
  sessionId       String
  question        String
  type            QuestionType
  difficulty      QuestionDifficulty
  relevanceScore  Float
  aiAnswer        String?
  category        String?
  isBookmarked    Boolean     @default(false)
  createdAt       DateTime    @default(now())

  session         UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  answers         Answer[]
}

model Answer {
  id          String   @id @default(cuid())
  userId      String
  questionId  String
  sessionId   String
  content     String
  isAiGenerated Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  session     UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Usage {
  id              String   @id @default(cuid())
  userId          String
  month           Int
  year            Int
  questionsGenerated Int   @default(0)
  aiAnswersGenerated Int   @default(0)
  resumeUploads   Int      @default(0)
  pdfExports      Int      @default(0)
  mockInterviews  Int      @default(0)

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SubscriptionPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum QuestionType {
  TECHNICAL
  BEHAVIORAL
  EXPERIENCE
}

enum QuestionDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
